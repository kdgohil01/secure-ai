{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karmadeepsinh Gohil\\\\projects\\\\tech tonic\\\\secure ai\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport MessageInput from \"./components/MessageInput\";\nimport PredictionResult from \"./components/PredictionResult\";\nimport SafeReply from \"./components/SafeReply\";\nimport LimeExplanation from \"./components/LimeExplanation\";\nimport AlertOverlay from \"./components/AlertOverlay\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [result, setResult] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [history, setHistory] = useState([]);\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    if (!darkMode) document.documentElement.classList.add(\"dark\");else document.documentElement.classList.remove(\"dark\");\n  };\n  useEffect(() => {\n    if (result && (result.prediction === \"spam\" || result.prediction === \"scam\")) {\n      setShowAlert(true);\n      const timer = setTimeout(() => setShowAlert(false), 4000);\n      return () => clearTimeout(timer);\n    }\n    if (result) {\n      setHistory([result, ...history]);\n    }\n  }, [result]);\n  const safeSuggestions = [\"Thank you, I will get back to you soon.\", \"Noted. Will check and reply shortly.\", \"Received. I will respond after reviewing.\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center p-6 transition-colors duration-500 relative\",\n    children: [/*#__PURE__*/_jsxDEV(AlertOverlay, {\n      show: showAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDarkMode,\n      className: \"absolute top-6 right-6 bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-lg shadow-md\",\n      children: darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      setResult: setResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(PredictionResult, {\n        result: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), result.prediction !== \"spam\" && /*#__PURE__*/_jsxDEV(SafeReply, {\n        suggestions: safeSuggestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 44\n      }, this), /*#__PURE__*/_jsxDEV(LimeExplanation, {\n        explanation: result.explanation,\n        message: result.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 w-full max-w-xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-semibold mb-2 text-gray-700 dark:text-gray-200\",\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), history.map((h, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 bg-gray-100 dark:bg-gray-800 rounded mb-2 shadow-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm\",\n          children: h.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs mt-1 text-gray-500 dark:text-gray-400\",\n          children: [h.prediction, \" - \", h.confidence, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"mt-12 text-gray-500 dark:text-gray-400 text-sm\",\n      children: \"SecureText AI \\xA9 2025 | Powered by Open-Source ML\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JJKJv+DhNrE/wDJ0iSzEbZPdwg0=\");\n_c = App;\nexport default App;\n\n// import { useState, useEffect } from \"react\";\n// import Header from \"./components/Header\";\n// import MessageInput from \"./components/MessageInput\";\n// import PredictionResult from \"./components/PredictionResult\";\n// import SafeReply from \"./components/SafeReply\";\n// import LimeExplanation from \"./components/LimeExplanation\";\n// import AlertOverlay from \"./components/AlertOverlay\";\n\n// function App() {\n//   const [result, setResult] = useState(null);\n//   const [darkMode, setDarkMode] = useState(false);\n//   const [showAlert, setShowAlert] = useState(false);\n//   const [history, setHistory] = useState([]);\n\n//   const toggleDarkMode = () => {\n//     setDarkMode(!darkMode);\n//     if (!darkMode) document.documentElement.classList.add(\"dark\");\n//     else document.documentElement.classList.remove(\"dark\");\n//   };\n\n//   // Mock messages for testing frontend\n//   const mockMessages = [\n//     {\n//       message: \"You won a prize, click here!\",\n//       prediction: \"spam\",\n//       confidence: 92.5,\n//       explanation: [[\"win\", 0.45], [\"prize\", 0.33], [\"click\", 0.21]]\n//     },\n//     {\n//       message: \"Hey, are we meeting tomorrow?\",\n//       prediction: \"safe\",\n//       confidence: 95.2,\n//       explanation: [[\"hey\", 0.1], [\"meeting\", 0.05]]\n//     },\n//     {\n//       message: \"Your account has been suspended, update info now!\",\n//       prediction: \"spam\",\n//       confidence: 88.3,\n//       explanation: [[\"account\", 0.4], [\"suspended\", 0.35], [\"update\", 0.2]]\n//     }\n//   ];\n\n//   // Simulate backend API call\n//   const handleAnalyze = () => {\n//     setResult(null); // reset previous result to show loading if needed\n\n//     // Simulate network delay\n//     setTimeout(() => {\n//       // Pick a random mock message\n//       const randomMessage = mockMessages[Math.floor(Math.random() * mockMessages.length)];\n//       setResult(randomMessage);\n//     }, 1000);\n//   };\n\n//   // Trigger scam alert if message is spam/scam\n//   useEffect(() => {\n//     if (result && (result.prediction === \"spam\" || result.prediction === \"scam\")) {\n//       setShowAlert(true);\n//       const timer = setTimeout(() => setShowAlert(false), 4000);\n//       return () => clearTimeout(timer);\n//     }\n//     if (result) {\n//       setHistory([result, ...history]);\n//     }\n//   }, [result]);\n\n//   // Example safe reply suggestions\n//   const safeSuggestions = [\n//     \"Thank you, I will get back to you soon.\",\n//     \"Noted. Will check and reply shortly.\",\n//     \"Received. I will respond after reviewing.\"\n//   ];\n\n//   return (\n//     <div className=\"min-h-screen flex flex-col items-center p-6 transition-colors duration-500 relative\">\n//       <AlertOverlay show={showAlert} />\n\n//       <button\n//         onClick={toggleDarkMode}\n//         className=\"absolute top-6 right-6 bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-lg shadow-md\"\n//       >\n//         {darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"}\n//       </button>\n\n//       <Header />\n\n//       {/* Pass handleAnalyze to MessageInput */}\n//       <MessageInput handleAnalyze={handleAnalyze} />\n\n//       {result && (\n//         <>\n//           <PredictionResult result={result} />\n//           {result.prediction !== \"spam\" && <SafeReply suggestions={safeSuggestions} />}\n//           <LimeExplanation explanation={result.explanation} message={result.message} />\n//         </>\n//       )}\n\n//       {/* History Section */}\n//       {history.length > 0 && (\n//         <div className=\"mt-6 w-full max-w-xl\">\n//           <h3 className=\"font-semibold mb-2 text-gray-700 dark:text-gray-200\">History</h3>\n//           {history.map((h, idx) => (\n//             <div key={idx} className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded mb-2 shadow-sm\">\n//               <p className=\"text-sm\">{h.message}</p>\n//               <p className=\"text-xs mt-1 text-gray-500 dark:text-gray-400\">{h.prediction} - {h.confidence}%</p>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n\n//       <footer className=\"mt-12 text-gray-500 dark:text-gray-400 text-sm\">\n//         SecureText AI ¬© 2025 | Powered by Open-Source ML\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Header","MessageInput","PredictionResult","SafeReply","LimeExplanation","AlertOverlay","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","result","setResult","darkMode","setDarkMode","showAlert","setShowAlert","history","setHistory","toggleDarkMode","document","documentElement","classList","add","remove","prediction","timer","setTimeout","clearTimeout","safeSuggestions","className","children","show","fileName","_jsxFileName","lineNumber","columnNumber","onClick","suggestions","explanation","message","length","map","h","idx","confidence","_c","$RefreshReg$"],"sources":["C:/Users/Karmadeepsinh Gohil/projects/tech tonic/secure ai/frontend/src/App.jsx"],"sourcesContent":["\r\nimport { useState, useEffect } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport MessageInput from \"./components/MessageInput\";\r\nimport PredictionResult from \"./components/PredictionResult\";\r\nimport SafeReply from \"./components/SafeReply\";\r\nimport LimeExplanation from \"./components/LimeExplanation\";\r\nimport AlertOverlay from \"./components/AlertOverlay\";\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState(null);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [history, setHistory] = useState([]);\r\n\r\n  const toggleDarkMode = () => {\r\n    setDarkMode(!darkMode);\r\n    if (!darkMode) document.documentElement.classList.add(\"dark\");\r\n    else document.documentElement.classList.remove(\"dark\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (result && (result.prediction === \"spam\" || result.prediction === \"scam\")) {\r\n      setShowAlert(true);\r\n      const timer = setTimeout(() => setShowAlert(false), 4000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (result) {\r\n      setHistory([result, ...history]);\r\n    }\r\n  }, [result]);\r\n\r\n  const safeSuggestions = [\r\n    \"Thank you, I will get back to you soon.\",\r\n    \"Noted. Will check and reply shortly.\",\r\n    \"Received. I will respond after reviewing.\"\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col items-center p-6 transition-colors duration-500 relative\">\r\n      <AlertOverlay show={showAlert} />\r\n\r\n      <button\r\n        onClick={toggleDarkMode}\r\n        className=\"absolute top-6 right-6 bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-lg shadow-md\"\r\n      >\r\n        {darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"}\r\n      </button>\r\n\r\n      <Header />\r\n      <MessageInput setResult={setResult} />\r\n      {result && (\r\n        <>\r\n          <PredictionResult result={result} />\r\n          {result.prediction !== \"spam\" && <SafeReply suggestions={safeSuggestions} />}\r\n          <LimeExplanation explanation={result.explanation} message={result.message} />\r\n        </>\r\n      )}\r\n\r\n      {/* Optional: History Section */}\r\n      {history.length > 0 && (\r\n        <div className=\"mt-6 w-full max-w-xl\">\r\n          <h3 className=\"font-semibold mb-2 text-gray-700 dark:text-gray-200\">History</h3>\r\n          {history.map((h, idx) => (\r\n            <div key={idx} className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded mb-2 shadow-sm\">\r\n              <p className=\"text-sm\">{h.message}</p>\r\n              <p className=\"text-xs mt-1 text-gray-500 dark:text-gray-400\">{h.prediction} - {h.confidence}%</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <footer className=\"mt-12 text-gray-500 dark:text-gray-400 text-sm\">\r\n        SecureText AI ¬© 2025 | Powered by Open-Source ML\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// import { useState, useEffect } from \"react\";\r\n// import Header from \"./components/Header\";\r\n// import MessageInput from \"./components/MessageInput\";\r\n// import PredictionResult from \"./components/PredictionResult\";\r\n// import SafeReply from \"./components/SafeReply\";\r\n// import LimeExplanation from \"./components/LimeExplanation\";\r\n// import AlertOverlay from \"./components/AlertOverlay\";\r\n\r\n// function App() {\r\n//   const [result, setResult] = useState(null);\r\n//   const [darkMode, setDarkMode] = useState(false);\r\n//   const [showAlert, setShowAlert] = useState(false);\r\n//   const [history, setHistory] = useState([]);\r\n\r\n//   const toggleDarkMode = () => {\r\n//     setDarkMode(!darkMode);\r\n//     if (!darkMode) document.documentElement.classList.add(\"dark\");\r\n//     else document.documentElement.classList.remove(\"dark\");\r\n//   };\r\n\r\n//   // Mock messages for testing frontend\r\n//   const mockMessages = [\r\n//     {\r\n//       message: \"You won a prize, click here!\",\r\n//       prediction: \"spam\",\r\n//       confidence: 92.5,\r\n//       explanation: [[\"win\", 0.45], [\"prize\", 0.33], [\"click\", 0.21]]\r\n//     },\r\n//     {\r\n//       message: \"Hey, are we meeting tomorrow?\",\r\n//       prediction: \"safe\",\r\n//       confidence: 95.2,\r\n//       explanation: [[\"hey\", 0.1], [\"meeting\", 0.05]]\r\n//     },\r\n//     {\r\n//       message: \"Your account has been suspended, update info now!\",\r\n//       prediction: \"spam\",\r\n//       confidence: 88.3,\r\n//       explanation: [[\"account\", 0.4], [\"suspended\", 0.35], [\"update\", 0.2]]\r\n//     }\r\n//   ];\r\n\r\n//   // Simulate backend API call\r\n//   const handleAnalyze = () => {\r\n//     setResult(null); // reset previous result to show loading if needed\r\n\r\n//     // Simulate network delay\r\n//     setTimeout(() => {\r\n//       // Pick a random mock message\r\n//       const randomMessage = mockMessages[Math.floor(Math.random() * mockMessages.length)];\r\n//       setResult(randomMessage);\r\n//     }, 1000);\r\n//   };\r\n\r\n//   // Trigger scam alert if message is spam/scam\r\n//   useEffect(() => {\r\n//     if (result && (result.prediction === \"spam\" || result.prediction === \"scam\")) {\r\n//       setShowAlert(true);\r\n//       const timer = setTimeout(() => setShowAlert(false), 4000);\r\n//       return () => clearTimeout(timer);\r\n//     }\r\n//     if (result) {\r\n//       setHistory([result, ...history]);\r\n//     }\r\n//   }, [result]);\r\n\r\n//   // Example safe reply suggestions\r\n//   const safeSuggestions = [\r\n//     \"Thank you, I will get back to you soon.\",\r\n//     \"Noted. Will check and reply shortly.\",\r\n//     \"Received. I will respond after reviewing.\"\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen flex flex-col items-center p-6 transition-colors duration-500 relative\">\r\n//       <AlertOverlay show={showAlert} />\r\n\r\n//       <button\r\n//         onClick={toggleDarkMode}\r\n//         className=\"absolute top-6 right-6 bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-lg shadow-md\"\r\n//       >\r\n//         {darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"}\r\n//       </button>\r\n\r\n//       <Header />\r\n\r\n//       {/* Pass handleAnalyze to MessageInput */}\r\n//       <MessageInput handleAnalyze={handleAnalyze} />\r\n\r\n//       {result && (\r\n//         <>\r\n//           <PredictionResult result={result} />\r\n//           {result.prediction !== \"spam\" && <SafeReply suggestions={safeSuggestions} />}\r\n//           <LimeExplanation explanation={result.explanation} message={result.message} />\r\n//         </>\r\n//       )}\r\n\r\n//       {/* History Section */}\r\n//       {history.length > 0 && (\r\n//         <div className=\"mt-6 w-full max-w-xl\">\r\n//           <h3 className=\"font-semibold mb-2 text-gray-700 dark:text-gray-200\">History</h3>\r\n//           {history.map((h, idx) => (\r\n//             <div key={idx} className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded mb-2 shadow-sm\">\r\n//               <p className=\"text-sm\">{h.message}</p>\r\n//               <p className=\"text-xs mt-1 text-gray-500 dark:text-gray-400\">{h.prediction} - {h.confidence}%</p>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n\r\n//       <footer className=\"mt-12 text-gray-500 dark:text-gray-400 text-sm\">\r\n//         SecureText AI ¬© 2025 | Powered by Open-Source ML\r\n//       </footer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n"],"mappings":";;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,YAAY,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMsB,cAAc,GAAGA,CAAA,KAAM;IAC3BL,WAAW,CAAC,CAACD,QAAQ,CAAC;IACtB,IAAI,CAACA,QAAQ,EAAEO,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAAC,KACzDH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;EACxD,CAAC;EAED1B,SAAS,CAAC,MAAM;IACd,IAAIa,MAAM,KAAKA,MAAM,CAACc,UAAU,KAAK,MAAM,IAAId,MAAM,CAACc,UAAU,KAAK,MAAM,CAAC,EAAE;MAC5ET,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMU,KAAK,GAAGC,UAAU,CAAC,MAAMX,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MACzD,OAAO,MAAMY,YAAY,CAACF,KAAK,CAAC;IAClC;IACA,IAAIf,MAAM,EAAE;MACVO,UAAU,CAAC,CAACP,MAAM,EAAE,GAAGM,OAAO,CAAC,CAAC;IAClC;EACF,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,MAAMkB,eAAe,GAAG,CACtB,yCAAyC,EACzC,sCAAsC,EACtC,2CAA2C,CAC5C;EAED,oBACEvB,OAAA;IAAKwB,SAAS,EAAC,qFAAqF;IAAAC,QAAA,gBAClGzB,OAAA,CAACF,YAAY;MAAC4B,IAAI,EAAEjB;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEjC9B,OAAA;MACE+B,OAAO,EAAElB,cAAe;MACxBW,SAAS,EAAC,qHAAqH;MAAAC,QAAA,EAE9HlB,QAAQ,GAAG,eAAe,GAAG;IAAc;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eAET9B,OAAA,CAACP,MAAM;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV9B,OAAA,CAACN,YAAY;MAACY,SAAS,EAAEA;IAAU;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACrCzB,MAAM,iBACLL,OAAA,CAAAE,SAAA;MAAAuB,QAAA,gBACEzB,OAAA,CAACL,gBAAgB;QAACU,MAAM,EAAEA;MAAO;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACnCzB,MAAM,CAACc,UAAU,KAAK,MAAM,iBAAInB,OAAA,CAACJ,SAAS;QAACoC,WAAW,EAAET;MAAgB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5E9B,OAAA,CAACH,eAAe;QAACoC,WAAW,EAAE5B,MAAM,CAAC4B,WAAY;QAACC,OAAO,EAAE7B,MAAM,CAAC6B;MAAQ;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC7E,CACH,EAGAnB,OAAO,CAACwB,MAAM,GAAG,CAAC,iBACjBnC,OAAA;MAAKwB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACnCzB,OAAA;QAAIwB,SAAS,EAAC,qDAAqD;QAAAC,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC/EnB,OAAO,CAACyB,GAAG,CAAC,CAACC,CAAC,EAAEC,GAAG,kBAClBtC,OAAA;QAAewB,SAAS,EAAC,yDAAyD;QAAAC,QAAA,gBAChFzB,OAAA;UAAGwB,SAAS,EAAC,SAAS;UAAAC,QAAA,EAAEY,CAAC,CAACH;QAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtC9B,OAAA;UAAGwB,SAAS,EAAC,+CAA+C;UAAAC,QAAA,GAAEY,CAAC,CAAClB,UAAU,EAAC,KAAG,EAACkB,CAAC,CAACE,UAAU,EAAC,GAAC;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,GAFzFQ,GAAG;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGR,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,eAED9B,OAAA;MAAQwB,SAAS,EAAC,gDAAgD;MAAAC,QAAA,EAAC;IAEnE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC1B,EAAA,CApEQD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AAsEZ,eAAeA,GAAG;;AAIlqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}