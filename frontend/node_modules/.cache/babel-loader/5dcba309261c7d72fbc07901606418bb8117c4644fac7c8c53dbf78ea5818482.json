{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karmadeepsinh Gohil\\\\projects\\\\tech tonic\\\\secure ai\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// // src/App.jsx\n// import { useState } from \"react\";\n// import ResultBox from \"./components/ResultBox\";\n\n// function App() {\n//   const [message, setMessage] = useState(\"\");\n//   const [result, setResult] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [darkMode, setDarkMode] = useState(false);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     setResult(null);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n//         method: \"POST\",\n//         headers: {\n// \"Content-Type\": \"application/json\",\n// },\n//         body: JSON.stringify({ message }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Server error. Check your backend.\");\n//       }\n\n//       const data = await response.json();\n//       setResult(data);\n//     } catch (error) {\n//       console.error(\"Error fetching prediction:\", error);\n//       setResult({ error: \"Failed to connect to backend\" });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className={darkMode ? \"bg-gray-900 text-white min-h-screen\" : \"bg-gray-100 text-gray-900 min-h-screen\"}>\n//       <div className=\"container mx-auto px-6 py-10 flex flex-col items-center\">\n\n//         {/* Header */}\n//         <div className=\"flex justify-between w-full max-w-xl mb-6\">\n//           <h1 className=\"text-3xl font-bold\">🔒 Secure AI</h1>\n//           <button\n//             onClick={() => setDarkMode(!darkMode)}\n//             className=\"px-4 py-2 rounded-lg shadow-md bg-indigo-600 text-white hover:bg-indigo-700\"\n//           >\n//             {darkMode ? \"☀️ Light\" : \"🌙 Dark\"}\n//           </button>\n//         </div>\n\n//         {/* Input Form */}\n//         <form\n//           onSubmit={handleSubmit}\n//           className=\"w-full max-w-xl bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6\"\n//         >\n//           <label className=\"block text-lg font-semibold mb-2\">Enter a Message:</label>\n//           <textarea\n//             value={message}\n//             onChange={(e) => setMessage(e.target.value)}\n//             placeholder=\"Type your message here...\"\n//             rows=\"4\"\n//             className=\"w-full p-3 border rounded-lg mb-4 text-gray-900 dark:text-white dark:bg-gray-700\"\n//           ></textarea>\n\n//           <button\n//             type=\"submit\"\n//             disabled={loading}\n//             className=\"w-full py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 disabled:bg-gray-400\"\n//           >\n//             {loading ? \"Analyzing...\" : \"Check Message\"}\n//           </button>\n//         </form>\n\n//         {/* Result Section */}\n//         {result && <ResultBox result={result} />}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n// src/App.jsx\nimport { useState } from \"react\";\n\n// Importing all components\nimport Header from \"./components/Header\";\nimport MessageInput from \"./components/MessageInput\";\nimport PredictionResult from \"./components/PredictionResult\";\nimport AlertOverlay from \"./components/AlertOverlay\";\nimport LimeExplanation from \"./components/LimeExplanation\";\nimport SafeReply from \"./components/SafeReply\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setResult(null);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Server error. Check your backend.\");\n      }\n      const data = await response.json();\n      setResult(data);\n    } catch (error) {\n      console.error(\"Error fetching prediction:\", error);\n      setResult({\n        error: \"Failed to connect to backend\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: darkMode ? \"bg-gray-900 text-white min-h-screen\" : \"bg-gray-100 text-gray-900 min-h-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-6 py-10 flex flex-col items-center\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        darkMode: darkMode,\n        setDarkMode: setDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        message: message,\n        setMessage: setMessage,\n        handleSubmit: handleSubmit,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), result && /*#__PURE__*/_jsxDEV(PredictionResult, {\n        result: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 20\n      }, this), (result === null || result === void 0 ? void 0 : result.prediction) === \"scam\" && /*#__PURE__*/_jsxDEV(AlertOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 43\n      }, this), result && /*#__PURE__*/_jsxDEV(LimeExplanation, {\n        explanation: result.explanation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 20\n      }, this), result && /*#__PURE__*/_jsxDEV(SafeReply, {\n        suggestion: result.safeReply\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5jU/WIwgjDBefw6rvzz9Tdus0uQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","MessageInput","PredictionResult","AlertOverlay","LimeExplanation","SafeReply","jsxDEV","_jsxDEV","App","_s","message","setMessage","result","setResult","loading","setLoading","darkMode","setDarkMode","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","prediction","explanation","suggestion","safeReply","_c","$RefreshReg$"],"sources":["C:/Users/Karmadeepsinh Gohil/projects/tech tonic/secure ai/frontend/src/App.jsx"],"sourcesContent":["// // src/App.jsx\r\n// import { useState } from \"react\";\r\n// import ResultBox from \"./components/ResultBox\";\r\n\r\n// function App() {\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [result, setResult] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [darkMode, setDarkMode] = useState(false);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setLoading(true);\r\n//     setResult(null);\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://127.0.0.1:5000/predict\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n// \"Content-Type\": \"application/json\",\r\n// },\r\n//         body: JSON.stringify({ message }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Server error. Check your backend.\");\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setResult(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching prediction:\", error);\r\n//       setResult({ error: \"Failed to connect to backend\" });\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className={darkMode ? \"bg-gray-900 text-white min-h-screen\" : \"bg-gray-100 text-gray-900 min-h-screen\"}>\r\n//       <div className=\"container mx-auto px-6 py-10 flex flex-col items-center\">\r\n        \r\n//         {/* Header */}\r\n//         <div className=\"flex justify-between w-full max-w-xl mb-6\">\r\n//           <h1 className=\"text-3xl font-bold\">🔒 Secure AI</h1>\r\n//           <button\r\n//             onClick={() => setDarkMode(!darkMode)}\r\n//             className=\"px-4 py-2 rounded-lg shadow-md bg-indigo-600 text-white hover:bg-indigo-700\"\r\n//           >\r\n//             {darkMode ? \"☀️ Light\" : \"🌙 Dark\"}\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Input Form */}\r\n//         <form\r\n//           onSubmit={handleSubmit}\r\n//           className=\"w-full max-w-xl bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6\"\r\n//         >\r\n//           <label className=\"block text-lg font-semibold mb-2\">Enter a Message:</label>\r\n//           <textarea\r\n//             value={message}\r\n//             onChange={(e) => setMessage(e.target.value)}\r\n//             placeholder=\"Type your message here...\"\r\n//             rows=\"4\"\r\n//             className=\"w-full p-3 border rounded-lg mb-4 text-gray-900 dark:text-white dark:bg-gray-700\"\r\n//           ></textarea>\r\n\r\n//           <button\r\n//             type=\"submit\"\r\n//             disabled={loading}\r\n//             className=\"w-full py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading ? \"Analyzing...\" : \"Check Message\"}\r\n//           </button>\r\n//         </form>\r\n\r\n//         {/* Result Section */}\r\n//         {result && <ResultBox result={result} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n// src/App.jsx\r\nimport { useState } from \"react\";\r\n\r\n// Importing all components\r\nimport Header from \"./components/Header\";\r\nimport MessageInput from \"./components/MessageInput\";\r\nimport PredictionResult from \"./components/PredictionResult\";\r\nimport AlertOverlay from \"./components/AlertOverlay\";\r\nimport LimeExplanation from \"./components/LimeExplanation\";\r\nimport SafeReply from \"./components/SafeReply\";\r\n\r\nfunction App() {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [result, setResult] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setResult(null);\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/predict\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ message }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Server error. Check your backend.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResult(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching prediction:\", error);\r\n      setResult({ error: \"Failed to connect to backend\" });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        darkMode\r\n          ? \"bg-gray-900 text-white min-h-screen\"\r\n          : \"bg-gray-100 text-gray-900 min-h-screen\"\r\n      }\r\n    >\r\n      <div className=\"container mx-auto px-6 py-10 flex flex-col items-center\">\r\n        {/* ✅ Header */}\r\n        <Header darkMode={darkMode} setDarkMode={setDarkMode} />\r\n\r\n        {/* ✅ Message Input */}\r\n        <MessageInput\r\n          message={message}\r\n          setMessage={setMessage}\r\n          handleSubmit={handleSubmit}\r\n          loading={loading}\r\n        />\r\n\r\n        {/* ✅ Prediction Result */}\r\n        {result && <PredictionResult result={result} />}\r\n\r\n        {/* ✅ Alert Overlay (show if scam detected) */}\r\n        {result?.prediction === \"scam\" && <AlertOverlay />}\r\n\r\n        {/* ✅ LIME Explanation */}\r\n        {result && <LimeExplanation explanation={result.explanation} />}\r\n\r\n        {/* ✅ Safe Reply Suggestion */}\r\n        {result && <SafeReply suggestion={result.safeReply} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}