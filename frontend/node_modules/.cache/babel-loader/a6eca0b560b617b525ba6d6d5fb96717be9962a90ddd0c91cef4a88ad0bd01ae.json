{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karmadeepsinh Gohil\\\\projects\\\\tech tonic\\\\secure ai\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// // src/App.jsx\n// import { useState } from \"react\";\n// import ResultBox from \"./components/ResultBox\";\n\n// function App() {\n//   const [message, setMessage] = useState(\"\");\n//   const [result, setResult] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [darkMode, setDarkMode] = useState(false);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     setResult(null);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n//         method: \"POST\",\n//         headers: {\n// \"Content-Type\": \"application/json\",\n// },\n//         body: JSON.stringify({ message }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Server error. Check your backend.\");\n//       }\n\n//       const data = await response.json();\n//       setResult(data);\n//     } catch (error) {\n//       console.error(\"Error fetching prediction:\", error);\n//       setResult({ error: \"Failed to connect to backend\" });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className={darkMode ? \"bg-gray-900 text-white min-h-screen\" : \"bg-gray-100 text-gray-900 min-h-screen\"}>\n//       <div className=\"container mx-auto px-6 py-10 flex flex-col items-center\">\n\n//         {/* Header */}\n//         <div className=\"flex justify-between w-full max-w-xl mb-6\">\n//           <h1 className=\"text-3xl font-bold\">üîí Secure AI</h1>\n//           <button\n//             onClick={() => setDarkMode(!darkMode)}\n//             className=\"px-4 py-2 rounded-lg shadow-md bg-indigo-600 text-white hover:bg-indigo-700\"\n//           >\n//             {darkMode ? \"‚òÄÔ∏è Light\" : \"üåô Dark\"}\n//           </button>\n//         </div>\n\n//         {/* Input Form */}\n//         <form\n//           onSubmit={handleSubmit}\n//           className=\"w-full max-w-xl bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6\"\n//         >\n//           <label className=\"block text-lg font-semibold mb-2\">Enter a Message:</label>\n//           <textarea\n//             value={message}\n//             onChange={(e) => setMessage(e.target.value)}\n//             placeholder=\"Type your message here...\"\n//             rows=\"4\"\n//             className=\"w-full p-3 border rounded-lg mb-4 text-gray-900 dark:text-white dark:bg-gray-700\"\n//           ></textarea>\n\n//           <button\n//             type=\"submit\"\n//             disabled={loading}\n//             className=\"w-full py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 disabled:bg-gray-400\"\n//           >\n//             {loading ? \"Analyzing...\" : \"Check Message\"}\n//           </button>\n//         </form>\n\n//         {/* Result Section */}\n//         {result && <ResultBox result={result} />}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n// src/App.jsx\nimport { useState } from \"react\";\n\n// Import all components\nimport Header from \"./components/Header\";\nimport MessageInput from \"./components/MessageInput\";\nimport PredictionResult from \"./components/PredictionResult\";\nimport LimeExplanation from \"./components/LimeExplanation\";\nimport SafeReply from \"./components/SafeReply\";\nimport AlertOverlay from \"./components/AlertOverlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [darkMode, setDarkMode] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: darkMode ? \"bg-gray-900 text-white min-h-screen\" : \"bg-gray-100 text-gray-900 min-h-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-6 py-10 flex flex-col items-center space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setDarkMode(!darkMode),\n        className: \"px-4 py-2 rounded-lg shadow-md bg-indigo-600 text-white hover:bg-indigo-700\",\n        children: darkMode ? \"‚òÄÔ∏è Light\" : \"üåô Dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        value: \"Test message input\",\n        onChange: () => {},\n        onSubmit: () => alert(\"Submitted!\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PredictionResult, {\n        result: \"This is a test prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LimeExplanation, {\n        explanation: [[\"win\", 0.5], [\"prize\", 0.3]],\n        message: \"You can win a prize today!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SafeReply, {\n        reply: \"This is a safe reply suggestion.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AlertOverlay, {\n        message: \"This is a test alert overlay.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"D2+2tCNohYwQ9K/tGnxPgGRQSlM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","MessageInput","PredictionResult","LimeExplanation","SafeReply","AlertOverlay","jsxDEV","_jsxDEV","App","_s","darkMode","setDarkMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","onSubmit","alert","result","explanation","message","reply","_c","$RefreshReg$"],"sources":["C:/Users/Karmadeepsinh Gohil/projects/tech tonic/secure ai/frontend/src/App.jsx"],"sourcesContent":["// // src/App.jsx\r\n// import { useState } from \"react\";\r\n// import ResultBox from \"./components/ResultBox\";\r\n\r\n// function App() {\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [result, setResult] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [darkMode, setDarkMode] = useState(false);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setLoading(true);\r\n//     setResult(null);\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://127.0.0.1:5000/predict\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n// \"Content-Type\": \"application/json\",\r\n// },\r\n//         body: JSON.stringify({ message }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Server error. Check your backend.\");\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setResult(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching prediction:\", error);\r\n//       setResult({ error: \"Failed to connect to backend\" });\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className={darkMode ? \"bg-gray-900 text-white min-h-screen\" : \"bg-gray-100 text-gray-900 min-h-screen\"}>\r\n//       <div className=\"container mx-auto px-6 py-10 flex flex-col items-center\">\r\n        \r\n//         {/* Header */}\r\n//         <div className=\"flex justify-between w-full max-w-xl mb-6\">\r\n//           <h1 className=\"text-3xl font-bold\">üîí Secure AI</h1>\r\n//           <button\r\n//             onClick={() => setDarkMode(!darkMode)}\r\n//             className=\"px-4 py-2 rounded-lg shadow-md bg-indigo-600 text-white hover:bg-indigo-700\"\r\n//           >\r\n//             {darkMode ? \"‚òÄÔ∏è Light\" : \"üåô Dark\"}\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Input Form */}\r\n//         <form\r\n//           onSubmit={handleSubmit}\r\n//           className=\"w-full max-w-xl bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6\"\r\n//         >\r\n//           <label className=\"block text-lg font-semibold mb-2\">Enter a Message:</label>\r\n//           <textarea\r\n//             value={message}\r\n//             onChange={(e) => setMessage(e.target.value)}\r\n//             placeholder=\"Type your message here...\"\r\n//             rows=\"4\"\r\n//             className=\"w-full p-3 border rounded-lg mb-4 text-gray-900 dark:text-white dark:bg-gray-700\"\r\n//           ></textarea>\r\n\r\n//           <button\r\n//             type=\"submit\"\r\n//             disabled={loading}\r\n//             className=\"w-full py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading ? \"Analyzing...\" : \"Check Message\"}\r\n//           </button>\r\n//         </form>\r\n\r\n//         {/* Result Section */}\r\n//         {result && <ResultBox result={result} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n// src/App.jsx\r\nimport { useState } from \"react\";\r\n\r\n// Import all components\r\nimport Header from \"./components/Header\";\r\nimport MessageInput from \"./components/MessageInput\";\r\nimport PredictionResult from \"./components/PredictionResult\";\r\nimport LimeExplanation from \"./components/LimeExplanation\";\r\nimport SafeReply from \"./components/SafeReply\";\r\nimport AlertOverlay from \"./components/AlertOverlay\";\r\n\r\nfunction App() {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        darkMode\r\n          ? \"bg-gray-900 text-white min-h-screen\"\r\n          : \"bg-gray-100 text-gray-900 min-h-screen\"\r\n      }\r\n    >\r\n      <div className=\"container mx-auto px-6 py-10 flex flex-col items-center space-y-6\">\r\n        \r\n        {/* ‚úÖ Header */}\r\n        <Header />\r\n\r\n        {/* ‚úÖ Dark/Light toggle button */}\r\n        <button\r\n          onClick={() => setDarkMode(!darkMode)}\r\n          className=\"px-4 py-2 rounded-lg shadow-md bg-indigo-600 text-white hover:bg-indigo-700\"\r\n        >\r\n          {darkMode ? \"‚òÄÔ∏è Light\" : \"üåô Dark\"}\r\n        </button>\r\n\r\n        {/* ‚úÖ MessageInput */}\r\n        <MessageInput\r\n          value=\"Test message input\"\r\n          onChange={() => {}}\r\n          onSubmit={() => alert(\"Submitted!\")}\r\n        />\r\n\r\n        {/* ‚úÖ PredictionResult */}\r\n        <PredictionResult result=\"This is a test prediction\" />\r\n\r\n        {/* ‚úÖ LimeExplanation */}\r\n        <LimeExplanation\r\n          explanation={[[\"win\", 0.5], [\"prize\", 0.3]]}\r\n          message=\"You can win a prize today!\"\r\n        />\r\n\r\n        {/* ‚úÖ SafeReply */}\r\n        <SafeReply reply=\"This is a safe reply suggestion.\" />\r\n\r\n        {/* ‚úÖ AlertOverlay */}\r\n        <AlertOverlay message=\"This is a test alert overlay.\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}